////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Garmin Canada Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2018 Garmin Canada Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 20.74Release
// Tag = production/akw/20.74.01-0-ge94e71c
////////////////////////////////////////////////////////////////////////////////

package com.github.jakz.runmap;

import com.garmin.fit.*;
import com.pixbits.lib.io.xml.gpx.Coordinate;
import com.pixbits.lib.io.xml.gpx.Gpx;
import com.pixbits.lib.io.xml.gpx.GpxTrack;
import com.pixbits.lib.io.xml.gpx.GpxTrackSegment;
import com.pixbits.lib.io.xml.gpx.GpxWaypoint;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Locale;

public class FitParser
{
  Gpx gpx;
  GpxTrack track;
  GpxTrackSegment segment;
  
  public Gpx parse(Path path) throws IOException
  {
    Decode decode = new Decode();
    MesgBroadcaster mesgBroadcaster = new MesgBroadcaster(decode);
    Listener listener = new Listener();
    
    try (BufferedInputStream in = new BufferedInputStream(Files.newInputStream(path)))
    {
      if (!decode.checkFileIntegrity((InputStream) in))
        throw new IllegalArgumentException("FIT file integrity failed.");
    }
    
    try (BufferedInputStream in = new BufferedInputStream(Files.newInputStream(path)))
    {
      gpx = new Gpx("1.1", "com.github.jakz.runmap");
      track = new GpxTrack("Running"); //TODO: enhance name
      segment = new GpxTrackSegment();
      gpx.tracks().add(track);
      track.segments().add(segment);
      
      mesgBroadcaster.addListener((DeviceInfoMesgListener) listener);
      mesgBroadcaster.addListener((RecordMesgListener) listener);
      decode.read(in, mesgBroadcaster, mesgBroadcaster);
    }
    
    return gpx;
  }

  private class Listener implements DeviceInfoMesgListener, RecordMesgListener
  {
    @Override
    public void onMesg(DeviceInfoMesg mesg)
    {
      if (mesg.getTimestamp() != null)
      {
        //System.out.print("   Timestamp: ");
        //System.out.println(mesg.getTimestamp());
      }
    }

    DateTimeFormatter timeStampFormatter = DateTimeFormatter
        .ofPattern("YYYY-MM-dd'T'HH:mm:ss'Z'").withLocale(Locale.ITALY)
        .withZone(ZoneId.systemDefault());

    @Override
    public void onMesg(RecordMesg mesg)
    {
      Integer lat = mesg.getPositionLat(), lon = mesg.getPositionLong();

      if (lat != null && lon != null)
      {
        double latitude = mesg.getPositionLat() * (180.0 / (1L << 31L));
        double longitude = mesg.getPositionLong() * (180.0 / (1L << 31L));
        float altitude = mesg.getAltitude();
        DateTime timestamp = mesg.getTimestamp();
        int hr = mesg.hasField(RecordMesg.HeartRateFieldNum)
            ? mesg.getHeartRate()
            : 0;

        GpxWaypoint waypoint = new GpxWaypoint();    
        Coordinate coord = new Coordinate(latitude, longitude, altitude);
        waypoint.setCoordinate(coord);
        waypoint.setTime(ZonedDateTime.ofInstant(timestamp.getDate().toInstant(), ZoneId.systemDefault()));
        segment.points().add(waypoint);
            
        /*System.out.printf("time %s, lat %2.6f, lon %2.6f, alt %2.2f, hr %d\n",
            timeStampFormatter.format(timestamp.getDate().toInstant()),
            latitude, longitude, altitude, hr);*/
      }

    }
  }
}
